@using Codeer.LowCode.Blazor.Components
@using Microsoft.AspNetCore.Components.Web
@using Codeer.LowCode.Blazor.Components.Fields
@using System.Text
@inherits FieldComponentBase<ColorPickerField>


@if (IsViewMode == true) {
  <div class="d-flex py-2">
    <div class="color-tip" style="background:@(Value)"></div>
    <span class="d-block" style="@GetStyleString()">@Value</span>
  </div>
} else {
  <label class="d-flex align-items-center">
    <input class="color-picker"
           type="color"
           disabled="@IsDisabled"
           id="@WebElementId"
           value="@Value"
           @onchange="RaiseOnValueChanged"/>
    <span style="@GetStyleString()">@Value</span>
  </label>
}

@code {
  public bool? IsDisabled => Field?.IsEnabled == false;

  public bool? IsViewMode => Field?.IsViewOnly;

  public string? Value => string.IsNullOrEmpty(Field.Value) ? Field.Design?.Default : Field.Value;

  protected override void OnParametersSet() {
    base.OnParametersSet();
    Field.SetStateChangedReceiver(StateHasChanged);
  }

  private async Task RaiseOnValueChanged(ChangeEventArgs e) {
    if (Field == null) return;
    await Field.SetValueAsync(e.Value?.ToString());
  }

  string? GetStyleString()
  {
    var style = new StringBuilder();
    if (!string.IsNullOrEmpty(Field.BackgroundColor))
    {
      style.Append($"--background: {Field.BackgroundColor};");
    }

    if (!string.IsNullOrEmpty(Field.Color))
    {
      style.Append($"--foreground: {Field.Color};");
    }

    return style.Length == 0 ? null : style.ToString();
  }
}

