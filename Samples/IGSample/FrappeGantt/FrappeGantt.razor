@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@implements IAsyncDisposable
@inject IJSRuntime JsRuntime

<div class="gantt-wrap @(DarkMode ? "dark" : "")">
    <svg id="@_elementId"/>
</div>
<div class="btn-group mt-2" role="group">
    <InputRadioGroup TValue="ViewMode" @bind-Value:get="_viewMode" @bind-Value:set="SetViewMode">
        <InputRadio Value="ViewMode.QuarterDay" class="btn-check" id="@(_elementId + "_v_qd")"/>
        <label class="btn btn-outline-primary" for="@(_elementId + "_v_qd")">
            Quarter Day
        </label>
        <InputRadio Value="ViewMode.HalfDay" class="btn-check" id="@(_elementId + "_v_hd")"/>
        <label class="btn btn-outline-primary" for="@(_elementId + "_v_hd")">
            Half Day
        </label>
        <InputRadio Value="ViewMode.Day" class="btn-check" id="@(_elementId + "_v_d")"/>
        <label class="btn btn-outline-primary" for="@(_elementId + "_v_d")">
            Day
        </label>
        <InputRadio Value="ViewMode.Week" class="btn-check" id="@(_elementId + "_v_w")"/>
        <label class="btn btn-outline-primary" for="@(_elementId + "_v_w")">
            Week
        </label>
        <InputRadio Value="ViewMode.Month" class="btn-check" id="@(_elementId + "_v_m")"/>
        <label class="btn btn-outline-primary" for="@(_elementId + "_v_m")">
            Month
        </label>
    </InputRadioGroup>
</div>

@code {

    private enum ViewMode {
        Hour,
        QuarterDay,
        HalfDay,
        Day,
        Week,
        Month,
    }

    private string _elementId = ("gantt_" + Guid.NewGuid()).Replace("-", "");
    private ViewMode _viewMode = ViewMode.Day;
    private List<GanttTaskData> _currentDataSource = new();
    private IJSObjectReference? _module;
    private DotNetObjectReference<FrappeGantt>? _dotNetObjectRef;

    [Parameter]
    public bool DarkMode { get; set; }

    [Parameter]
    public List<GanttTaskData> DataSource { get; set; } = new();

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        _dotNetObjectRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender) {
            _currentDataSource = DataSource;
            _module = await JsRuntime.InvokeAsync<IJSObjectReference>(
                "window.FrappeGanttModule.create", _dotNetObjectRef, "#" + _elementId, _currentDataSource);
        }
    }

    protected override async Task OnParametersSetAsync() {
        await base.OnParametersSetAsync();
        var module = _module;
        var currentDataSource = _currentDataSource;
        if (module is not null && currentDataSource != DataSource) {
            _currentDataSource = DataSource;
            await module.InvokeVoidAsync("setDataSource", DataSource);
        }
    }

    public async ValueTask DisposeAsync() {
        var module = _module;
        if (module is not null) {
            await module.DisposeAsync();
        }

        _dotNetObjectRef?.Dispose();
    }

    private async void SetViewMode(ViewMode viewMode) {
        _viewMode = viewMode;
        var module = _module;
        if (module is not null) {
            await module.InvokeVoidAsync("setViewMode", viewMode switch {
                ViewMode.Hour => "Hour",
                ViewMode.QuarterDay => "Quarter Day",
                ViewMode.HalfDay => "Half Day",
                ViewMode.Day => "Day",
                ViewMode.Week => "Week",
                ViewMode.Month => "Month",
                _ => throw new ArgumentOutOfRangeException(nameof(viewMode))
            });
        }
    }

    [JSInvokable]
    public void OnClick(GanttTaskData task) {
        Console.WriteLine($"Task {task} clicked");
    }

    [JSInvokable]
    public void OnDateChange(GanttTaskData task, DateTime start, DateTime end) {
        Console.WriteLine($"Task {task} date changed to {start} - {end}");
    }

    [JSInvokable]
    public void OnProgressChange(GanttTaskData task, double progress) {
        Console.WriteLine($"Task {task} progress changed to {progress}");
    }

    [JSInvokable]
    public void OnViewChange(string viewMode) {
        Console.WriteLine($"View changed to {viewMode}");
    }

}