using Codeer.LowCode.Blazor.Repository.Design;
using Codeer.LowCode.Blazor.SystemSettings;

namespace AccessSample.Designer.Lib
{
    internal static class DbMapping
    {
        internal static List<string> CreateDDL(this ModuleDesign module, DataSourceType dataSourceType)
        {
            var ddl = new List<string>();
            var dbColumnDefinitions = module.Fields
                .Select(e => CreateColumnDefinition(dataSourceType, e)).SelectMany(e => e).ToList();

            ddl.Add($"CREATE TABLE {module.DbTable} (");
            if (dbColumnDefinitions.Any())
            {
                ddl.AddRange(dbColumnDefinitions.Take(dbColumnDefinitions.Count - 1).Select(e => e + ","));
                ddl.Add(dbColumnDefinitions.Last());
            }
            ddl.Add(");");
            return ddl;
        }

        private static List<string> CreateColumnDefinition(DataSourceType dataSourceType, FieldDesignBase field)
        {
            if (field is DbValueFieldDesignBase dbValue)
            {
                if (string.IsNullOrEmpty(dbValue.DbColumn)) return [];
                return [$"  {dbValue.DbColumn} {MapToColumnType(dataSourceType, dbValue.GetType(), dbValue.DbColumn)}"];
            }
            else if (field is FileFieldDesign file)
            {
                var columns = dataSourceType switch
                {
                    DataSourceType.SQLite => new[] { "TEXT", "TEXT", "INTEGER" },
                    DataSourceType.SQLServer => ["UNIQUEIDENTIFIER", "NVARCHAR(MAX)", "INT"],
                    DataSourceType.PostgreSQL => ["UUID", "TEXT", "INTEGER"],
                    DataSourceType.Oracle => ["VARCHAR2(36)", "VARCHAR2(4000)", "NUMBER"],
                    _ => throw new Exception()
                };

                var list = new List<string>();
                if (!string.IsNullOrEmpty(file.DbColumnFileGuid)) list.Add($"  {file.DbColumnFileGuid} {columns[0]}");
                if (!string.IsNullOrEmpty(file.DbColumnFileName)) list.Add($"  {file.DbColumnFileName} {columns[1]}");
                if (!string.IsNullOrEmpty(file.DbColumnFileSize)) list.Add($"  {file.DbColumnFileSize} {columns[2]}");
                return list;
            }
            return [];
        }

        private static readonly Dictionary<Type, string> SqliteTypeMapping = new()
        {
            {typeof(IdFieldDesign), "INTEGER PRIMARY KEY AUTOINCREMENT"},
            {typeof(TextFieldDesign), "TEXT"},
            {typeof(NumberFieldDesign), "INTEGER"},
            {typeof(DateFieldDesign), "DATE"},
            {typeof(DateTimeFieldDesign), "DATETIME"},
            {typeof(TimeFieldDesign), "TIME"},
            {typeof(BooleanFieldDesign), "BOOLEAN"},
            {typeof(LinkFieldDesign), "TEXT"},
            {typeof(SelectFieldDesign), "TEXT"},
            {typeof(RadioGroupFieldDesign), "TEXT"}
        };

        private static readonly Dictionary<Type, string> SqlserverTypeMapping = new()
        {
            {typeof(IdFieldDesign), "BIGINT IDENTITY(1,1) PRIMARY KEY"},
            {typeof(TextFieldDesign), "NVARCHAR(MAX)"},
            {typeof(NumberFieldDesign), "INT"},
            {typeof(DateFieldDesign), "DATE"},
            {typeof(DateTimeFieldDesign), "DATETIME"},
            {typeof(TimeFieldDesign), "TIME"},
            {typeof(BooleanFieldDesign), "BIT"},
            {typeof(LinkFieldDesign), "NVARCHAR(MAX)"},
            {typeof(SelectFieldDesign), "NVARCHAR(MAX)"},
            {typeof(RadioGroupFieldDesign), "NVARCHAR(MAX)"}
        };

        private static readonly Dictionary<Type, string> PostgresqlTypeMapping = new()
        {
            {typeof(IdFieldDesign), "BIGSERIAL PRIMARY KEY"},
            {typeof(TextFieldDesign), "TEXT"},
            {typeof(NumberFieldDesign), "INTEGER"},
            {typeof(DateFieldDesign), "DATE"},
            {typeof(DateTimeFieldDesign), "TIMESTAMP"},
            {typeof(TimeFieldDesign), "TIME"},
            {typeof(BooleanFieldDesign), "BOOLEAN"},
            {typeof(LinkFieldDesign), "TEXT"},
            {typeof(SelectFieldDesign), "TEXT"},
            {typeof(RadioGroupFieldDesign), "TEXT"}
        };

        private static readonly Dictionary<Type, string> OracleTypeMapping = new()
        {
            {typeof(IdFieldDesign), "NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY"},
            {typeof(TextFieldDesign), "VARCHAR2(4000)"},
            {typeof(NumberFieldDesign), "NUMBER"},
            {typeof(DateFieldDesign), "DATE"},
            {typeof(DateTimeFieldDesign), "TIMESTAMP"},
            {typeof(TimeFieldDesign), "TIMESTAMP WITH LOCAL TIME ZONE"},
            {typeof(BooleanFieldDesign), "NUMBER(1)"},
            {typeof(LinkFieldDesign), "VARCHAR2(4000)"},
            {typeof(SelectFieldDesign), "VARCHAR2(4000)"},
            {typeof(RadioGroupFieldDesign), "VARCHAR2(4000)"}
        };

        private static string MapToColumnType(DataSourceType dataSourceType, Type fieldType, string name)
        {
            if (name.ToLower() != "id" && fieldType == typeof(IdFieldDesign)) fieldType = typeof(NumberFieldDesign);
            try
            {
                return dataSourceType switch
                {
                    DataSourceType.SQLite => SqliteTypeMapping[fieldType],
                    DataSourceType.SQLServer => SqlserverTypeMapping[fieldType],
                    DataSourceType.PostgreSQL => PostgresqlTypeMapping[fieldType],
                    DataSourceType.Oracle => OracleTypeMapping[fieldType],
                    _ => throw new Exception()
                };
            }
            catch
            {
                throw new Exception($"Database type not supported: {dataSourceType}, {fieldType}");
            }
        }
    }
}
