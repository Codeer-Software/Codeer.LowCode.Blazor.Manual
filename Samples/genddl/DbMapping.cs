namespace genddl
{
    internal class DbMapping
    {

        private static readonly Dictionary<string, string> SqliteTypeMapping = new()
        {
            {"Id", "INTEGER PRIMARY KEY AUTOINCREMENT"},
            {"Text", "TEXT"},
            {"Number", "INTEGER"},
            {"Date", "DATE"},
            {"DateTime", "DATETIME"},
            {"Time", "TIME"},
            {"CheckBox", "BOOLEAN"},
            {"Link", "TEXT"},
            {"Select", "TEXT"},
            {"RadioGroup", "TEXT"}
        };

        private static readonly Dictionary<string, string> SqlserverTypeMapping = new()
        {
            {"Id", "BIGINT IDENTITY(1,1) PRIMARY KEY"},
            { "Text", "NVARCHAR(MAX)"},
            { "Number", "INT"},
            { "Date", "DATE"},
            { "DateTime", "DATETIME"},
            { "Time", "TIME"},
            { "CheckBox", "BIT"},
            { "Link", "NVARCHAR(MAX)"},
            { "Select", "NVARCHAR(MAX)"},
            { "RadioGroup", "NVARCHAR(MAX)"}
        };

        private static readonly Dictionary<string, string> PostgresqlTypeMapping = new()
        {
            {"Id", "BIGSERIAL PRIMARY KEY"},
            {"Text", "TEXT"},
            {"Number", "INTEGER"},
            {"Date", "DATE"},
            {"DateTime", "TIMESTAMP"},
            {"Time", "TIME"},
            {"CheckBox", "BOOLEAN"},
            {"Link", "TEXT"},
            {"Select", "TEXT"},
            {"RadioGroup", "TEXT"}
        };

        private static readonly Dictionary<string, string> OracleTypeMapping = new()
        {
            {"Id", "NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY"},
            {"Text", "VARCHAR2(4000)"},
            {"Number", "NUMBER"},
            {"Date", "DATE"},
            {"DateTime", "TIMESTAMP"},
            {"Time", "TIMESTAMP WITH LOCAL TIME ZONE"},
            {"CheckBox", "NUMBER(1)"},
            {"Link", "VARCHAR2(4000)"},
            {"Select", "VARCHAR2(4000)"},
            {"RadioGroup", "VARCHAR2(4000)"}
        };

        public static string MapToColumnType(string databaseType, string fieldType)
        {
            return databaseType switch
            {
                "sqlite" => SqliteTypeMapping[fieldType],
                "sqlserver" => SqlserverTypeMapping[fieldType],
                "mssql" => SqlserverTypeMapping[fieldType],
                "postgresql" => PostgresqlTypeMapping[fieldType],
                "pgsql" => PostgresqlTypeMapping[fieldType],
                "oracle" => OracleTypeMapping[fieldType],
                _ => throw new Exception($"Database type not supported: {databaseType}")
            };
        }

    }
}
