@page "/FluentUI/{ModuleDesignName}"
@page "/FluentUI/{ModuleDesignName}/{Id}"
@using LowCodeSamples.Client.Shared.Services
@using Codeer.LowCode.Blazor.Repository.Design
@using Codeer.LowCode.Blazor.Components.AppParts.PageFrame
@using Codeer.LowCode.Blazor.Components.AppParts.Page
@using Codeer.LowCode.Blazor.RequestInterfaces
@using Codeer.LowCode.Blazor.Components.Primitives
@implements IDisposable
@inject IAppInfoService AppInfoService
@inject INavigationService NavigationService

<StyleLoader>
  .btn-primary {
    color: #fff;
    background-color: #1b6ec2;
    border-color: #1861ac;
  }

  .btn:focus, .btn:active:focus, .btn-link.nav-link:focus, .form-control:focus, .form-check-input:focus {
    box-shadow: 0 0 0 0.1rem white, 0 0 0 0.25rem #258cfb;
  }
</StyleLoader>

@if (_isValid)
{
  <LowCodePageComponent ModuleDesignName="@ModuleDesignName" PageFrameName="@PageFrameName" Id="@Id" Guid="@(AppInfoService.AsImplement().Guid)"></LowCodePageComponent>
}

@code {
  public string PageFrameName => NavigationService.AsImplement().GetCurrentPageFrame();

  [Parameter]
  public string? ModuleDesignName { get; set; }

  [Parameter]
  public string? Id { get; set; }

  bool _isValid = false;

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    AppInfoService.AsImplement().OnHotReload += PageBase_OnHotReload;
  }

  public void Dispose() => AppInfoService.AsImplement().OnHotReload -= PageBase_OnHotReload;

  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();
    await InitPage();
  }

  private void PageBase_OnHotReload(object? sender, EventArgs e)
  {
    NavigationService.CompleteUrl(AppInfoService, PageFrameName, ModuleDesignName);
    StateHasChanged();
  }

  private async Task InitPage()
  {
    _isValid = false;
    await AppInfoService.AsImplement().InitializeAppAsync();
    _isValid = true;
    NavigationService.CompleteUrl(AppInfoService, PageFrameName, ModuleDesignName);
  }
}
