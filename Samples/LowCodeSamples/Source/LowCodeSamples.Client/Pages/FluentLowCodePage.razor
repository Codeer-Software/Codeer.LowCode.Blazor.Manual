@page "/Fluent/{ModuleDesignName}"
@page "/Fluent/{ModuleDesignName}/{Id}"
@using LowCodeSamples.Client.Shared.Services
@using Codeer.LowCode.Blazor.Repository.Design
@using Codeer.LowCode.Blazor.Components.AppParts.PageFrame
@using Codeer.LowCode.Blazor.Components.AppParts.Page
@using Codeer.LowCode.Blazor.RequestInterfaces
@using Codeer.LowCode.Blazor.Components.Primitives
@implements IDisposable
@inject IAppInfoService AppInfoService
@inject INavigationService NavigationService

<StyleLoader Href="/css/mdb/fluent.min.css" />
<StyleLoader>
  .navbar-brand {
    color: white;
  }
  .was-validated .form-control:invalid, .form-control.is-invalid {
    margin-bottom: 0;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc4c64'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc4c64' stroke='none'/%3e%3c/svg%3e");
  }
  .table>:not(caption)>*>* {
    padding: .5rem .5rem;
  }
  table.table tr.can-select.selected {
    --bs-table-accent-bg: var(--bs-table-bg);
  }
  table.table {
    --bs-table-accent-bg: white;
  }
  .form-select {
    padding-block: .27rem;
  }
  .input-group > .form-select {
    height: calc(2.08rem + 2px);
  }
  .form-check {
    padding-left: 2rem;
  }
  .form-check .form-check-input {
    margin-left:-1.5rem;
  }
  .card {
    box-shadow: 0 1px 2.2px 0 rgba(0,0,0,.15),0 0.5px 2.2px 1px rgba(0,0,0,.14);
  }
</StyleLoader>

@if (_isValid)
{
  <LowCodePageComponent ModuleDesignName="@ModuleDesignName" PageFrameName="@PageFrameName" Id="@Id" Guid="@(AppInfoService.AsImplement().Guid)"></LowCodePageComponent>
}

@code {
  public string PageFrameName => "Fluent";

  [Parameter]
  public string? ModuleDesignName { get; set; }

  [Parameter]
  public string? Id { get; set; }

  bool _isValid = false;

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    AppInfoService.AsImplement().OnHotReload += PageBase_OnHotReload;
  }

  public void Dispose() => AppInfoService.AsImplement().OnHotReload -= PageBase_OnHotReload;

  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();
    await InitPage();
  }

  private void PageBase_OnHotReload(object? sender, EventArgs e)
  {
    if (string.IsNullOrEmpty(PageFrameName))
      NavigationService.ReplaceTo(NavigationService.GetTopPageUrl());
    StateHasChanged();
  }

  private async Task InitPage()
  {
    _isValid = false;
    await AppInfoService.AsImplement().InitializeAppAsync();
    _isValid = true;
  }
}
